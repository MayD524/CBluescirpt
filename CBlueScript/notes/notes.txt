flags
    EQ  : Equal To flags
    GT  : Greater than flag

how to do arrays?
ideas:
    make a class for objects?
    string parsing (easiest without having to rewrite)

function params (invert the order for func calls)
push to stack
function test(arg1, arg2) -> pop arg1
                             pop arg2

pop from stack
test(arg1, arg2)          -> push arg2
                             push arg1

USE VARIABLES!!!!!!!
****** ARRAYS!!!!
AND EVERYTHING ELSE!!!!!
mov array_ind1, 10
mov array_ind2, 20

array & scopes
scope_name.var_name
scope_name.array_name.index


structs: (how to impliment?)
    light weight "class" like objects

operations:
    // IO
    in     = Input                  in <var ptr>,prompt
    out    = Output                 out <var ptr>
    open   = open a file
    close  = clase a file
    read   = read file
    write  = write file

    // variable stuff
    push   = push to stack          push <data>
    pop    = pop from stack         pop <var ptr>
    mov    = move value             mov <var ptr>,<data>
    cast   = change data type       cast <var ptr>,type
    type   = get data type of       type <var ptr>,<var_in ptr>
    free   = kills a variable       free <var ptr>

    // math oper
    add    = add 2 values           oper <var ptr>,%<data>
    sub    = sub 2 values
    mul    = mul 2 values
    div    = div 2 values

    // logic/control
    cmp    = compair               cmp %<var ptr>,%<var ptr>
    jmp    = non-conditional jump
    je     = conditional (true) jump (eql flag set)
    jne    = conditional (false) jump (eql flag not set)

    // greater than jumps (can use with)
    // inverse in compiler for < symbole
    jge    = jump greater than or equal to (checks grtFlag)
    jng    = jump not greater than
    jg     = jump greater than (checks grtFlag)

    // other logic control

    force  = force a flag to be true or false

    // bit operations
    xor     = xor 2 values
    and     = and 2 values
    or      = or 2 values
    not     = invert a value

    // functions
    call   = call a function
    ret    = return value

    // generic stuff
    goto       = goto a line number 
    <lableptr> = a piece of code we can jump to
    %<pointer> = get pointer (used as variables)

language specifics:
    stack (list/array)?
    main memory (map or something)?


