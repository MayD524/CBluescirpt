jmp main
;------------------------------
; Author: May Draskovics
; Date: 10/5/2021
; name: stdlib.cbs
; Bluescript standard library
;------------------------------
; split function
label split ; start of function
pop split.delim
pop split.splitStr
mov split.index,0
mov split.arrayIndex,0
push %split.splitStr
call size
pop split.stringSize
mov split.currentString,
push splitArray
push %split.stringSize
call makeArray
pop split.splitArray
label MRo!4C! ; start of while loop
push %split.splitStr
push %split.index
call getIndex
pop split.char
mov UBU11c8_isSet,0 ; start of an if block
cmp %split.char,%split.delim ; if block compairison
jne end_of_if_UBU11c8 ; jump to end if expression is false
mov UBU11c8_isSet,1 ; we made it in the if statement
push %split.splitArray
push %split.arrayIndex
push %split.currentString
call append
mov split.currentString,
mov split.-Z/E'Um,%split.arrayIndex
add split.-Z/E'Um,1
mov split.arrayIndex,%split.-Z/E'Um
label end_of_if_UBU11c8 ; end of if
mov :@K!'MZ,1 ; temp constant
cmp %UBU11c8_isSet,%:@K!'MZ ; compair the isSet of the previous if block
je end_of_else_*X2k+fy ; jump if the previous if was true
mov split.lA|i!hX,%split.currentString
add split.lA|i!hX,%split.char
mov split.currentString,%split.lA|i!hX
label end_of_else_*X2k+fy ; end of else
mov split.GX>H:\*,%split.index
add split.GX>H:\*,1
mov split.index,%split.GX>H:\*
cmp %split.index,%split.stringSize
jng MRo!4C! ; jump to head if we can continue iterating
push %split.splitArray
push %split.arrayIndex
push %split.currentString
call append
push %split.splitArray
free %split.splitArray
ret ; end of function
ret ; return from function
; for throwing errors
; throw(error_name)
label throw
; we already know the string is on stack
call println
; this will exit
jmp EOF_BS_JMP_POINT
; get the size of an object
; size(lookAt)
label size
pop size.lookAt
sizeof size.varSize,%size.lookAt
push %size.varSize
free %size.varSize
free %size.lookAt
ret
; print a string with newline
; println(stringToPrint)
label println
pop println.stringToPrint
out %println.stringToPrint
out \n
free %println.stringToPrint
ret
; print a string without newline
; print(string)
label print
pop print.string
out %print.string
free %print.string
ret
; get user input
; input(prompt)
label input
pop inp.prompt
in inp.out,%inp.prompt
push %inp.out
free %inp.prompt
free %inp.out
ret
; get a random number in range
; random(min, max)
label random
pop random.max
pop random.min
; rint pushes to stack so no
; need to use a var
rint %random.min,%random.max
free %random.min
free %random.max
ret
; get the type of an object
; getType(obj)
label getType
pop getType.obj
type getType.out,%getType.obj
push %getType.out
free %getType.out
free %getType.obj
ret
; get the index of a char in a string
; getIndex(getIndexOf, index)
label getIndex
pop getIndex.index
pop getIndex.getIndexOf
index getIndex.retOfIndex,%getIndex.getIndexOf[%getIndex.index]
push %getIndex.retOfIndex
free %getIndex.index
free %getIndex.getIndexOf
free %getIndex.retOfIndex
ret
; read a file
; read(filename)
label read
pop read.filename
read_file fData,%read.filename
push %fData
free %read.filename
ret
; copy a string
; strcpy(string1, string2, count)
label strcpy
pop strcpy.count
pop strcpy.string2
pop strcpy.string1
mov strcpy.cnt,0
add strcpy.count,1
label _strcpyLoop
add strcpy.string1,%strcpy.string2
add strcpy.cnt,1
cmp %strcpy.cnd,%strcpy.count
jne _strcpyLoop
push %strcpy.string1
free %strcpy.string1
free %strcpy.string2
free %strcpy.count
free %strcpy.cnt
ret
; write a file
; write(filename, array)
label write
pop write.filename
pop write.array
write_file %write.filename,%write.array
free %write.filename
free %write.array
ret
label main ; start of function
push prompt>
call input
pop main.a
mov main.T|&D$W_,1
mov IU2B\BC_isSet,0 ; start of an if block
cmp %main.a,%main.T|&D$W_ ; if block compairison
jne end_of_if_IU2B\BC ; jump to end if expression is false
mov IU2B\BC_isSet,1 ; we made it in the if statement
push hello
call println
label end_of_if_IU2B\BC ; end of if
mov )x@2*k{,1 ;temp constant
cmp %IU2B\BC_isSet,%)x@2*k{
free %)x@2*k{
je end_of_elif_IU2B\BC ; jump to end
mov main.y'TXKs?,2
cmp %main.a,%main.y'TXKs? ; if cmp
jne end_of_elif_IU2B\BC
mov IU2B\BC_isSet,1
mov main.elif a,= 2
push good bye
call println
label end_of_elif_IU2B\BC ; end of elif
mov s_x.+te,1 ; temp constant
cmp %IU2B\BC_isSet,%s_x.+te ; compair the isSet of the previous if block
je end_of_else_IU2B\BC ; jump if the previous if was true
push weee
call println
label end_of_else_IU2B\BC ; end of else
jmp EOF_BS_JMP_POINT
label EOF_BS_JMP_POINT