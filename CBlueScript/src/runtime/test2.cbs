jmp main
label size
pop size.lookAt
sizeof size.varSize,%size.lookAt
push %size.varSize
free %size.varSize
free %size.lookAt
ret
label println
pop println.stringToPrint
out %println.stringToPrint
out \n
free %println.stringToPrint
ret
label print
pop print.string
out %print.string
free %print.string
ret
label getType
pop getType.obj
type getType.out,%getType.obj
push %getType.out
free %getType.out
free %getType.obj
ret
label getIndex; getIndex(getIndexOf, index)
pop getIndex.index
pop getIndex.getIndexOf
index getIndex.retOfIndex,%getIndex.getIndexOf[%getIndex.index]
push %getIndex.retOfIndex
free %getIndex.index
free %getIndex.getIndexOf
free %getIndex.retOfIndex
ret
label and
pop and.cmp2
pop and.cmp1
cmp %and.cmp1,%and.cmp2
jne not_and
push 1
free %and.cmp1
free %and.cmp2
ret
label not_and
push 0
free %and.cmp1
free %and.cmp2
ret ; return from and
label not
pop not.arg1
mov not.true,1
cmp %not.arg1,%not.true
jne not_end
push 0
free %not.true
free %not.arg1
ret
label not_end
push 1
free %not.true
free %not.arg1
ret ; return from not
label or
pop or.cmp2
pop or.cmp1
mov or.true,1
cmp %or.cmp1,%or.true
jne cmp1_notTrue
push 1
free %or.cmp2
free %or.cmp1
free %or.true
ret
label cmp1_notTrue
cmp %or.cmp2,%or.true
jne cmp2_notTrue
push 1
free %or.cmp2
free %or.cmp1
free %or.true
ret
label cmp2_notTrue
push 0
free %or.cmp2
free %or.cmp1
free %or.true
ret
label main ; start of function
mov main.a,1
mov main.b,0
push %main.a
push %main.b
call and
pop main.c
push %main.c
call println
jmp EOF_BS_JMP_POINT
label EOF_BS_JMP_POINT